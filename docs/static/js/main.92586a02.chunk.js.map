{"version":3,"sources":["api/weather.js","api/geolocation.js","fonts/fontawesome.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["WeatherApi","getWeatherLocation","location","language","units","URL","API_KEY","fetch","then","response","json","data","catch","error","console","log","GeoLocationApi","getCityFromCoordinates","latitude","longitude","loc","address","town","village","state","library","add","fas","isDay","sunrise","sunset","d","Date","now","Math","round","getTime","SunShower","className","ThunderStorm","Cloudy","Snow","Sunny","Moon","Rainy","WeatherIcons","props","icon","iconId","App","useState","setLocation","weatherData","setWeatherData","transitioning","setTransitioning","useEffect","navigator","geolocation","getCurrentPosition","position","coords","locationName","getWeatherData","timeout","length","cod","weather","id","sys","name","country","wind","speed","main","temp","temp_min","temp_max","pressure","humidity","type","onChange","event","clearTimeout","setTimeout","target","value","required","href","rel","style","color","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.92586a02.chunk.js","sourcesContent":["import {API_KEY} from '../config/config.json';\r\n\r\nconst WeatherApi = {\r\n    getWeatherLocation: (location, language = 'en', units = 'metric') => {\r\n        let URL = `https://api.openweathermap.org/data/2.5/weather?q=${location}&appid=${API_KEY}&lang=${language}&units=${units}`;\r\n        return fetch(URL)\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                return data;\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n                return false;\r\n            });\r\n    },\r\n};\r\n\r\nexport default WeatherApi;\r\n","const GeoLocationApi = {\r\n    getCityFromCoordinates: (latitude, longitude) => {\r\n        let URL = `https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}&zoom=18&addressdetails=1`;\r\n        return fetch(URL)\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                let loc = '';\r\n                if (data.address.town) {\r\n                    loc = data.address.town;\r\n                } else if (data.address.village) {\r\n                    loc = data.address.village;\r\n                } else if (data.address.state) {\r\n                    loc = data.address.state;\r\n                }\r\n                return loc;\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n                return false;\r\n            });\r\n    },\r\n};\r\n\r\nexport default GeoLocationApi;\r\n","import {library} from '@fortawesome/fontawesome-svg-core';\r\nimport {fas} from '@fortawesome/free-solid-svg-icons';\r\nlibrary.add(fas);\r\n","import React from 'react';\r\n\r\nconst WeatherIcons = (props) => {\r\n    let icon;\r\n    switch (true) {\r\n        case props.iconId >= 200 && props.iconId < 300:\r\n            icon = <ThunderStorm />;\r\n            break;\r\n        case props.iconId >= 300 && props.iconId < 400:\r\n            icon = <SunShower />;\r\n            break;\r\n        case props.iconId >= 500 && props.iconId < 600:\r\n            icon = <Rainy />;\r\n            break;\r\n        case props.iconId >= 600 && props.iconId < 700:\r\n            icon = <Snow />;\r\n            break;\r\n        case props.iconId >= 801 && props.iconId <= 804:\r\n            icon = <Cloudy />;\r\n            break;\r\n        case props.iconId === 800:\r\n            icon = isDay(props.sunrise, props.sunset) ? <Sunny /> : <Moon />;\r\n            break;\r\n        default:\r\n            icon = <Sunny />;\r\n            break;\r\n    }\r\n    return icon;\r\n};\r\n\r\nconst isDay = (sunrise, sunset) => {\r\n    let d = new Date(),\r\n        now = Math.round(d.getTime() / 1000);\r\n    if (now >= sunrise && now <= sunset) {\r\n        return true;\r\n    }\r\n    return false;\r\n};\r\n\r\nconst SunShower = () => {\r\n    return (\r\n        <div className=\"icon sun-shower\">\r\n            <div className=\"cloud\"></div>\r\n            <div className=\"sun\">\r\n                <div className=\"rays\"></div>\r\n            </div>\r\n            <div className=\"rain\"></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ThunderStorm = () => {\r\n    return (\r\n        <div className=\"icon thunder-storm\">\r\n            <div className=\"cloud\"></div>\r\n            <div className=\"lightning\">\r\n                <div className=\"bolt\"></div>\r\n                <div className=\"bolt\"></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Cloudy = () => {\r\n    return (\r\n        <div className=\"icon cloudy\">\r\n            <div className=\"cloud\"></div>\r\n            <div className=\"cloud\"></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Snow = () => {\r\n    return (\r\n        <div className=\"icon flurries\">\r\n            <div className=\"cloud\"></div>\r\n            <div className=\"snow\">\r\n                <div className=\"flake\"></div>\r\n                <div className=\"flake\"></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Sunny = () => {\r\n    return (\r\n        <div className=\"icon sunny\">\r\n            <div className=\"sun\">\r\n                <div className=\"rays\"></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Moon = () => {\r\n    return (\r\n        <div className=\"icon\">\r\n            <div className=\"moon\">\r\n                <div className=\"stars stars1\">*</div>\r\n                <div className=\"stars stars2\">*</div>\r\n                <div className=\"shooting-star\"></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Rainy = () => {\r\n    return (\r\n        <div className=\"icon rainy\">\r\n            <div className=\"cloud\"></div>\r\n            <div className=\"rain\"></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WeatherIcons;\r\n","import React, {useEffect, useState} from 'react';\r\nimport './styles/App.scss';\r\nimport './styles/weather.scss';\r\n\r\nimport WeatherApi from './api/weather';\r\nimport GeoLocationApi from './api/geolocation';\r\n\r\nimport './fonts/fontawesome';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\n\r\nimport Weather from './components/weather';\r\n\r\nfunction App() {\r\n    let [location, setLocation] = useState('');\r\n    let [weatherData, setWeatherData] = useState({});\r\n    let [transitioning, setTransitioning] = useState(true);\r\n\r\n    useEffect(() => {\r\n        if ('geolocation' in navigator) {\r\n            navigator.geolocation.getCurrentPosition((position) => {\r\n                GeoLocationApi.getCityFromCoordinates(\r\n                    position.coords.latitude,\r\n                    position.coords.longitude,\r\n                )\r\n                    .then((locationName) => {\r\n                        getWeatherData(locationName);\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(error);\r\n                    });\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        getWeatherData(location);\r\n    }, [location]);\r\n\r\n    let timeout = false;\r\n    const setInputLocation = (event) => {\r\n        if (timeout) clearTimeout(timeout);\r\n        timeout = setTimeout(() => {\r\n            setLocation(event.target.value);\r\n            setTransitioning(false);\r\n        }, 2500);\r\n    };\r\n\r\n    const getWeatherData = (locationName) => {\r\n        if (locationName.length >= 3) {\r\n            WeatherApi.getWeatherLocation(locationName)\r\n                .then((data) => {\r\n                    setTransitioning(true);\r\n                    setWeatherData(data);\r\n                })\r\n                .catch((error) => {\r\n                    console.log(error);\r\n                    setWeatherData({});\r\n                });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            {weatherData.cod === 200 ? (\r\n                <div className={transitioning ? 'fade-in' : 'fade-out'}>\r\n                    <header>\r\n                        <Weather\r\n                            iconId={weatherData.weather[0].id}\r\n                            sunrise={weatherData.sys.sunrise}\r\n                            sunset={weatherData.sys.sunset}\r\n                        />\r\n                        <h1>\r\n                            {weatherData.name}\r\n                            <span className=\"pill\">\r\n                                {weatherData.sys.country}\r\n                            </span>\r\n                        </h1>\r\n                    </header>\r\n                    <section>\r\n                        <div className=\"data-item\">\r\n                            <label>Wind speed</label>\r\n                            <FontAwesomeIcon\r\n                                icon=\"wind\"\r\n                                className=\"wind-color\"\r\n                            />\r\n                            <p>{weatherData.wind.speed} m/s</p>\r\n                        </div>\r\n                        <div className=\"data-item\">\r\n                            <label>Curr. temp.</label>\r\n                            <FontAwesomeIcon\r\n                                icon=\"temperature-high\"\r\n                                className=\"temp-color\"\r\n                            />\r\n                            <p>{Math.round(weatherData.main.temp)} º</p>\r\n                        </div>\r\n                        <div className=\"data-item\">\r\n                            <label>Min. temp.</label>\r\n                            <FontAwesomeIcon\r\n                                icon=\"chevron-down\"\r\n                                className=\"min-temp-color\"\r\n                            />\r\n                            <p>{Math.round(weatherData.main.temp_min)} º</p>\r\n                        </div>\r\n                        <div className=\"data-item\">\r\n                            <label>Max temp.</label>\r\n                            <FontAwesomeIcon\r\n                                icon=\"chevron-up\"\r\n                                className=\"max-temp-color\"\r\n                            />\r\n                            <p>{Math.round(weatherData.main.temp_max)} º</p>\r\n                        </div>\r\n                        <div className=\"data-item\">\r\n                            <label>Pressure</label>\r\n                            <FontAwesomeIcon\r\n                                icon=\"tachometer-alt\"\r\n                                className=\"pressure-color\"\r\n                            />\r\n                            <p>{weatherData.main.pressure} hPa</p>\r\n                        </div>\r\n                        <div className=\"data-item\">\r\n                            <label>Humidity</label>\r\n                            <FontAwesomeIcon\r\n                                icon=\"tint\"\r\n                                className=\"humidity-color\"\r\n                            />\r\n                            <p>{weatherData.main.humidity} %</p>\r\n                        </div>\r\n                    </section>\r\n                </div>\r\n            ) : null}\r\n            {weatherData.cod === '404' ? (\r\n                <div className=\"not-found\">\r\n                    <h1>Ooops! Location not found</h1>\r\n                </div>\r\n            ) : null}\r\n            <label>\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"input\"\r\n                    onChange={setInputLocation}\r\n                    required\r\n                />\r\n                <div className=\"label-text\">Type a location...</div>\r\n            </label>\r\n            <footer>\r\n                <p>\r\n                    <a\r\n                        href=\"https://github.com/arkanos\"\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\">\r\n                        Made with <span style={{color: '#e25555'}}>❤</span>\r\n                    </a>\r\n                </p>\r\n            </footer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}